// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TableTopBattleTracker.Data;

#nullable disable

namespace TableTopBattleTracker.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220310073810_NullableDCOnSpells")]
    partial class NullableDCOnSpells
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TableTopBattleTracker.Model.Action", b =>
                {
                    b.Property<int>("ActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ActionId"));

                    b.Property<string>("Desc")
                        .HasColumnType("text");

                    b.Property<int>("Distance")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("Reach")
                        .HasColumnType("integer");

                    b.HasKey("ActionId");

                    b.ToTable("action");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.ActionDamageType", b =>
                {
                    b.Property<int>("ActionId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<byte>("DamagetypeId")
                        .HasColumnType("smallint")
                        .HasColumnOrder(1);

                    b.HasKey("ActionId", "DamagetypeId");

                    b.HasIndex("DamagetypeId");

                    b.ToTable("action_damage_types");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.ActionDCType", b =>
                {
                    b.Property<int>("ActionId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<byte>("CharacteristicId")
                        .HasColumnType("smallint")
                        .HasColumnOrder(1);

                    b.HasKey("ActionId", "CharacteristicId");

                    b.HasIndex("CharacteristicId");

                    b.ToTable("action_dc_types");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.AreaOfEffect", b =>
                {
                    b.Property<byte>("AreaOfEffectId")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("AreaOfEffectId");

                    b.ToTable("area_of_effect");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.CastingComponent", b =>
                {
                    b.Property<byte>("CastingComponentId")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("CastingComponentId");

                    b.ToTable("casting_components");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.CastRange", b =>
                {
                    b.Property<int>("CastRangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CastRangeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("CastRangeId");

                    b.ToTable("cast_range");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.CastTime", b =>
                {
                    b.Property<int>("CastTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CastTimeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("CastTimeId");

                    b.ToTable("cast_time");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.Character", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CharacterId"));

                    b.Property<string>("Allignment")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("ArmorClass")
                        .HasColumnType("integer");

                    b.Property<float>("ChallengeRating")
                        .HasColumnType("real");

                    b.Property<int>("Charisma")
                        .HasColumnType("integer");

                    b.Property<int>("Constitution")
                        .HasColumnType("integer");

                    b.Property<int>("CurrentHitPoints")
                        .HasColumnType("integer");

                    b.Property<int>("Dexterity")
                        .HasColumnType("integer");

                    b.Property<int>("Experience")
                        .HasColumnType("integer");

                    b.Property<string>("HitDice")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<int>("InitialHitPoints")
                        .HasColumnType("integer");

                    b.Property<int>("Intelligence")
                        .HasColumnType("integer");

                    b.Property<byte>("MonsterSizeId")
                        .HasColumnType("smallint");

                    b.Property<int?>("MonsterTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("ProficiencyBonus")
                        .HasColumnType("integer");

                    b.Property<int>("Strength")
                        .HasColumnType("integer");

                    b.Property<int>("Wisdom")
                        .HasColumnType("integer");

                    b.HasKey("CharacterId");

                    b.HasIndex("MonsterSizeId");

                    b.HasIndex("MonsterTypeId");

                    b.ToTable("characters");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.Characteristic", b =>
                {
                    b.Property<byte>("CharacteristicId")
                        .HasColumnType("smallint");

                    b.Property<string>("Desc")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.HasKey("CharacteristicId");

                    b.ToTable("characteristics");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.Condition", b =>
                {
                    b.Property<byte>("ConditionId")
                        .HasColumnType("smallint");

                    b.Property<string>("Desc")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.HasKey("ConditionId");

                    b.ToTable("conditions");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.ConditionImmunity", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<byte>("ConditionId")
                        .HasColumnType("smallint")
                        .HasColumnOrder(1);

                    b.HasKey("CharacterId", "ConditionId");

                    b.HasIndex("ConditionId");

                    b.ToTable("condition_immunities");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.DamageImmunitie", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<byte>("DamageTypeId")
                        .HasColumnType("smallint")
                        .HasColumnOrder(1);

                    b.HasKey("CharacterId", "DamageTypeId");

                    b.HasIndex("DamageTypeId");

                    b.ToTable("damage_immunities");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.DamageResistance", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<byte>("DamageTypeId")
                        .HasColumnType("smallint")
                        .HasColumnOrder(1);

                    b.HasKey("CharacterId", "DamageTypeId");

                    b.HasIndex("DamageTypeId");

                    b.ToTable("damage_resistances");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.DamageType", b =>
                {
                    b.Property<byte>("DamageTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("DamageTypeId");

                    b.ToTable("damage_types");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.DamageVulnerabilitie", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<byte>("DamageTypeId")
                        .HasColumnType("smallint")
                        .HasColumnOrder(1);

                    b.HasKey("CharacterId", "DamageTypeId");

                    b.HasIndex("DamageTypeId");

                    b.ToTable("damage_vulnerabilities");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LanguageId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LanguageId");

                    b.ToTable("languages");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.LegendaryAction", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<int>("ActionId")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.Property<int>("BonusToHit")
                        .HasColumnType("integer");

                    b.Property<int>("Cost")
                        .HasColumnType("integer");

                    b.Property<int?>("DC")
                        .HasColumnType("integer");

                    b.Property<string>("DamageDice")
                        .HasColumnType("text");

                    b.HasKey("CharacterId", "ActionId");

                    b.HasIndex("ActionId");

                    b.ToTable("legendary_actions");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.Monster", b =>
                {
                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Index");

                    b.ToTable("monsters");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.MonsterAction", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<int>("ActionId")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.Property<int>("BonusToHit")
                        .HasColumnType("integer");

                    b.Property<string>("DamageDice")
                        .HasColumnType("text");

                    b.Property<int?>("DifficultyClass")
                        .HasColumnType("integer");

                    b.HasKey("CharacterId", "ActionId");

                    b.HasIndex("ActionId");

                    b.ToTable("monster_action");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.MonsterLanguage", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.HasKey("CharacterId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("monster_languges");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.MonsterProficiency", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<int>("ProficiencyId")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.Property<int>("Modifier")
                        .HasColumnType("integer");

                    b.HasKey("CharacterId", "ProficiencyId");

                    b.HasIndex("ProficiencyId");

                    b.ToTable("monster_proficiency");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.MonsterSense", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<int>("SenseId")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.Property<int>("Distance")
                        .HasColumnType("integer");

                    b.HasKey("CharacterId", "SenseId");

                    b.HasIndex("SenseId");

                    b.ToTable("monster_senses");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.MonsterSize", b =>
                {
                    b.Property<byte>("MonsterSizeId")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<float>("SpaceModifier")
                        .HasColumnType("real");

                    b.HasKey("MonsterSizeId");

                    b.ToTable("monster_size");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.MonsterSpeed", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<byte>("SpeedTypeId")
                        .HasColumnType("smallint")
                        .HasColumnOrder(1);

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("CharacterId", "SpeedTypeId");

                    b.HasIndex("SpeedTypeId");

                    b.ToTable("monster_speed");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.MonsterType", b =>
                {
                    b.Property<int>("MonsterTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MonsterTypeId"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("MonsterTypeId");

                    b.ToTable("monster_types");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.MultiAction", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<int>("MonsterActionId")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<int?>("MonsterActionActionId")
                        .HasColumnType("integer");

                    b.Property<int?>("MonsterActionCharacterId")
                        .HasColumnType("integer");

                    b.HasKey("CharacterId", "MonsterActionId");

                    b.HasIndex("MonsterActionCharacterId", "MonsterActionActionId");

                    b.ToTable("multiattack");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.Proficiency", b =>
                {
                    b.Property<int>("ProficiencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProficiencyId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("ProficiencyId");

                    b.ToTable("proficiencies");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.Sense", b =>
                {
                    b.Property<int>("SenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SenseId"));

                    b.Property<string>("Desc")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("SenseId");

                    b.ToTable("senses");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.Slot", b =>
                {
                    b.Property<byte>("SlotId")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("SlotId");

                    b.ToTable("slots");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.SpecialAbility", b =>
                {
                    b.Property<int>("SpecialAbilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SpecialAbilityId"));

                    b.Property<int?>("CharacterId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int?>("SpellcastingId")
                        .HasColumnType("integer");

                    b.Property<int>("UsageId")
                        .HasColumnType("integer");

                    b.HasKey("SpecialAbilityId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("SpellcastingId");

                    b.HasIndex("UsageId");

                    b.ToTable("special_ability");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.SpeedType", b =>
                {
                    b.Property<byte>("SpeedTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("SpeedTypeId");

                    b.ToTable("speed_type");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.Spell", b =>
                {
                    b.Property<int>("SpellId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SpellId"));

                    b.Property<byte?>("AreaOfEffectId")
                        .HasColumnType("smallint");

                    b.Property<int?>("AreasSize")
                        .HasColumnType("integer");

                    b.Property<int>("CastRangeId")
                        .HasColumnType("integer");

                    b.Property<int>("CastTimeId")
                        .HasColumnType("integer");

                    b.Property<byte?>("DC")
                        .HasColumnType("smallint");

                    b.Property<string>("Desc")
                        .HasColumnType("text");

                    b.Property<string>("Duration")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("IsConcetration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRitual")
                        .HasColumnType("boolean");

                    b.Property<byte>("Level")
                        .HasColumnType("smallint");

                    b.Property<string>("Materials")
                        .HasMaxLength(96)
                        .HasColumnType("character varying(96)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(96)
                        .HasColumnType("character varying(96)");

                    b.Property<int>("SpellSchoolId")
                        .HasColumnType("integer");

                    b.HasKey("SpellId");

                    b.HasIndex("AreaOfEffectId");

                    b.HasIndex("CastRangeId");

                    b.HasIndex("CastTimeId");

                    b.HasIndex("SpellSchoolId");

                    b.ToTable("spells");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.Spellcasting", b =>
                {
                    b.Property<int>("SpellcastingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SpellcastingId"));

                    b.Property<byte>("CharacteristicId")
                        .HasColumnType("smallint");

                    b.Property<int?>("DifficultyClass")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("Modifier")
                        .HasColumnType("integer");

                    b.Property<string>("School")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("SpellcastingId");

                    b.HasIndex("CharacteristicId");

                    b.ToTable("spellcasting");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.SpellCastingComponent", b =>
                {
                    b.Property<int>("SpellId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<byte>("CastingComponentId")
                        .HasColumnType("smallint")
                        .HasColumnOrder(1);

                    b.HasKey("SpellId", "CastingComponentId");

                    b.HasIndex("CastingComponentId");

                    b.ToTable("spell_casting_components");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.SpellcastingSlot", b =>
                {
                    b.Property<int>("SpellcastingId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<byte>("SlotId")
                        .HasColumnType("smallint")
                        .HasColumnOrder(1);

                    b.Property<int>("Times")
                        .HasColumnType("integer");

                    b.HasKey("SpellcastingId", "SlotId");

                    b.HasIndex("SlotId");

                    b.ToTable("spellcasting_slots");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.SpellcastingSpell", b =>
                {
                    b.Property<int>("SpellId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<int>("SpellcastingId")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.Property<int>("UsageId")
                        .HasColumnType("integer");

                    b.HasKey("SpellId", "SpellcastingId");

                    b.HasIndex("SpellcastingId");

                    b.HasIndex("UsageId");

                    b.ToTable("spellcasting_spells");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.SpellDamage", b =>
                {
                    b.Property<int>("SpellId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<byte>("DamageTypeId")
                        .HasColumnType("smallint")
                        .HasColumnOrder(1);

                    b.Property<int>("IncreaseType")
                        .HasColumnType("integer");

                    b.HasKey("SpellId", "DamageTypeId");

                    b.HasIndex("DamageTypeId");

                    b.ToTable("spell_damages");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.SpellDamageValue", b =>
                {
                    b.Property<int>("SpellId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<byte>("DamageTypeId")
                        .HasColumnType("smallint")
                        .HasColumnOrder(1);

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnOrder(2);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.HasKey("SpellId", "DamageTypeId", "Level");

                    b.ToTable("spell_damage_values");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.SpellSchool", b =>
                {
                    b.Property<int>("SpellSchoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SpellSchoolId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SpellSchoolId");

                    b.ToTable("spell_school");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.Usage", b =>
                {
                    b.Property<int>("UsageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UsageId"));

                    b.Property<int>("Times")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("UsageId");

                    b.ToTable("usage");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.ActionDamageType", b =>
                {
                    b.HasOne("TableTopBattleTracker.Model.Action", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TableTopBattleTracker.Model.DamageType", "DamageType")
                        .WithMany()
                        .HasForeignKey("DamagetypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("DamageType");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.ActionDCType", b =>
                {
                    b.HasOne("TableTopBattleTracker.Model.Action", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TableTopBattleTracker.Model.Characteristic", "Characteristic")
                        .WithMany()
                        .HasForeignKey("CharacteristicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Characteristic");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.Character", b =>
                {
                    b.HasOne("TableTopBattleTracker.Model.MonsterSize", "MonsterSize")
                        .WithMany()
                        .HasForeignKey("MonsterSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TableTopBattleTracker.Model.MonsterType", "MonsterType")
                        .WithMany()
                        .HasForeignKey("MonsterTypeId");

                    b.Navigation("MonsterSize");

                    b.Navigation("MonsterType");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.ConditionImmunity", b =>
                {
                    b.HasOne("TableTopBattleTracker.Model.Character", null)
                        .WithMany("ConditionImmunities")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TableTopBattleTracker.Model.Condition", "Condition")
                        .WithMany()
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condition");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.DamageImmunitie", b =>
                {
                    b.HasOne("TableTopBattleTracker.Model.Character", null)
                        .WithMany("DamageImmunities")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TableTopBattleTracker.Model.DamageType", "DamageType")
                        .WithMany()
                        .HasForeignKey("DamageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DamageType");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.DamageResistance", b =>
                {
                    b.HasOne("TableTopBattleTracker.Model.Character", null)
                        .WithMany("DamageResistances")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TableTopBattleTracker.Model.DamageType", "DamageType")
                        .WithMany()
                        .HasForeignKey("DamageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DamageType");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.DamageVulnerabilitie", b =>
                {
                    b.HasOne("TableTopBattleTracker.Model.Character", null)
                        .WithMany("DamageVulnerabilities")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TableTopBattleTracker.Model.DamageType", "DamageType")
                        .WithMany()
                        .HasForeignKey("DamageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DamageType");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.LegendaryAction", b =>
                {
                    b.HasOne("TableTopBattleTracker.Model.Action", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TableTopBattleTracker.Model.Character", null)
                        .WithMany("LegendaryActions")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.MonsterAction", b =>
                {
                    b.HasOne("TableTopBattleTracker.Model.Action", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TableTopBattleTracker.Model.Character", null)
                        .WithMany("MonsterActions")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.MonsterLanguage", b =>
                {
                    b.HasOne("TableTopBattleTracker.Model.Character", null)
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TableTopBattleTracker.Model.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.MonsterProficiency", b =>
                {
                    b.HasOne("TableTopBattleTracker.Model.Character", null)
                        .WithMany("Proficiencies")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TableTopBattleTracker.Model.Proficiency", "Proficiency")
                        .WithMany()
                        .HasForeignKey("ProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proficiency");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.MonsterSense", b =>
                {
                    b.HasOne("TableTopBattleTracker.Model.Character", null)
                        .WithMany("Senses")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TableTopBattleTracker.Model.Sense", "Sense")
                        .WithMany()
                        .HasForeignKey("SenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sense");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.MonsterSpeed", b =>
                {
                    b.HasOne("TableTopBattleTracker.Model.Character", null)
                        .WithMany("Speeds")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TableTopBattleTracker.Model.SpeedType", "SpeedType")
                        .WithMany()
                        .HasForeignKey("SpeedTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SpeedType");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.MultiAction", b =>
                {
                    b.HasOne("TableTopBattleTracker.Model.Character", null)
                        .WithMany("MultiAction")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TableTopBattleTracker.Model.MonsterAction", "MonsterAction")
                        .WithMany()
                        .HasForeignKey("MonsterActionCharacterId", "MonsterActionActionId");

                    b.Navigation("MonsterAction");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.SpecialAbility", b =>
                {
                    b.HasOne("TableTopBattleTracker.Model.Character", null)
                        .WithMany("SpecialAbilities")
                        .HasForeignKey("CharacterId");

                    b.HasOne("TableTopBattleTracker.Model.Spellcasting", "Spellcasting")
                        .WithMany()
                        .HasForeignKey("SpellcastingId");

                    b.HasOne("TableTopBattleTracker.Model.Usage", "Usage")
                        .WithMany()
                        .HasForeignKey("UsageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Spellcasting");

                    b.Navigation("Usage");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.Spell", b =>
                {
                    b.HasOne("TableTopBattleTracker.Model.AreaOfEffect", "AreaOfEffect")
                        .WithMany()
                        .HasForeignKey("AreaOfEffectId");

                    b.HasOne("TableTopBattleTracker.Model.CastRange", "CastRange")
                        .WithMany()
                        .HasForeignKey("CastRangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TableTopBattleTracker.Model.CastTime", "CastTime")
                        .WithMany()
                        .HasForeignKey("CastTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TableTopBattleTracker.Model.SpellSchool", "SpellSchool")
                        .WithMany()
                        .HasForeignKey("SpellSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AreaOfEffect");

                    b.Navigation("CastRange");

                    b.Navigation("CastTime");

                    b.Navigation("SpellSchool");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.Spellcasting", b =>
                {
                    b.HasOne("TableTopBattleTracker.Model.Characteristic", "Ability")
                        .WithMany()
                        .HasForeignKey("CharacteristicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ability");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.SpellCastingComponent", b =>
                {
                    b.HasOne("TableTopBattleTracker.Model.CastingComponent", "CastingComponent")
                        .WithMany()
                        .HasForeignKey("CastingComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TableTopBattleTracker.Model.Spell", "Spell")
                        .WithMany()
                        .HasForeignKey("SpellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CastingComponent");

                    b.Navigation("Spell");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.SpellcastingSlot", b =>
                {
                    b.HasOne("TableTopBattleTracker.Model.Slot", "Slot")
                        .WithMany()
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TableTopBattleTracker.Model.Spellcasting", null)
                        .WithMany("Slots")
                        .HasForeignKey("SpellcastingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.SpellcastingSpell", b =>
                {
                    b.HasOne("TableTopBattleTracker.Model.Spellcasting", null)
                        .WithMany("Spells")
                        .HasForeignKey("SpellcastingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TableTopBattleTracker.Model.Usage", "Usage")
                        .WithMany()
                        .HasForeignKey("UsageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usage");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.SpellDamage", b =>
                {
                    b.HasOne("TableTopBattleTracker.Model.DamageType", "DamageType")
                        .WithMany()
                        .HasForeignKey("DamageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TableTopBattleTracker.Model.Spell", "Spell")
                        .WithMany("SpellDamage")
                        .HasForeignKey("SpellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DamageType");

                    b.Navigation("Spell");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.SpellDamageValue", b =>
                {
                    b.HasOne("TableTopBattleTracker.Model.SpellDamage", null)
                        .WithMany("SpellDamageValues")
                        .HasForeignKey("SpellId", "DamageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.Character", b =>
                {
                    b.Navigation("ConditionImmunities");

                    b.Navigation("DamageImmunities");

                    b.Navigation("DamageResistances");

                    b.Navigation("DamageVulnerabilities");

                    b.Navigation("LegendaryActions");

                    b.Navigation("MonsterActions");

                    b.Navigation("MultiAction");

                    b.Navigation("Proficiencies");

                    b.Navigation("Senses");

                    b.Navigation("SpecialAbilities");

                    b.Navigation("Speeds");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.Spell", b =>
                {
                    b.Navigation("SpellDamage");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.Spellcasting", b =>
                {
                    b.Navigation("Slots");

                    b.Navigation("Spells");
                });

            modelBuilder.Entity("TableTopBattleTracker.Model.SpellDamage", b =>
                {
                    b.Navigation("SpellDamageValues");
                });
#pragma warning restore 612, 618
        }
    }
}
